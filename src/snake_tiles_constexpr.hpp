#if !defined(SNAKE_TILES_CONSTEXPR_HPP)
#define SNAKE_TILES_CONSTEXPR_HPP

#include <cstddef>

#include "screen/TileDef.h"
#include "screen/constexpr_tile_utils.hpp"

namespace snake {
inline constexpr size_t GRID_SPACE_PIX{7U};

inline constexpr size_t BorderTile_SideLength{GRID_SPACE_PIX};
inline constexpr auto Border_Tile_Data{
    constexpr_screen::fill_with_rgb565<BorderTile_SideLength *
                                       BorderTile_SideLength * 2>(
        constexpr_screen::Color::BLUE)};

inline constexpr screen::Tile BorderTile{.side_length = BorderTile_SideLength,
                                         .format = screen::Format::RGB565,
                                         .data = std::data(Border_Tile_Data)};

inline constexpr size_t SnakeTile_SideLength{GRID_SPACE_PIX};
/* clang-format off */
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_HEAD_UP_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_HEAD_DOWN_Data{
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x1F,0x00, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_HEAD_RIGHT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x1F,0x00, 0x1F,0x00, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x1F,0x00, 0x1F,0x00, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_HEAD_LEFT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0x1F,0x00, 0x1F,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0x1F,0x00, 0x1F,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_TAIL_UP_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xEF,0x79, 0xDE,0xF3, 0xDE,0xF3, 0xDE,0xF3, 0xEF,0x79, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xEF,0x79, 0xDE,0xF3, 0xDE,0xF3, 0xDE,0xF3, 0xEF,0x79, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_TAIL_DOWN_Data{
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xEF,0x79, 0xDE,0xF3, 0xDE,0xF3, 0xDE,0xF3, 0xEF,0x79, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xEF,0x79, 0xDE,0xF3, 0xDE,0xF3, 0xDE,0xF3, 0xEF,0x79, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_TAIL_LEFT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_TAIL_RIGHT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0xDE,0xF3, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0xEF,0x79, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_BODY_UPDOWN_Data{
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_BODY_LEFTRIGHT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_CURVE_UPLEFT_Data{
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_CURVE_UPRIGHT_Data{
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_CURVE_DOWNLEFT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
};
inline constexpr std::array<uint8_t, SnakeTile_SideLength *
                                    SnakeTile_SideLength * 2> Snake_CURVE_DOWNRIGHT_Data{
    0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07,
    0x00,0x00, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0xE0,0x07, 0x00,0x00,
};
/* clang-format on */

enum struct SnakeBodyPart : uint8_t {
  HEAD_UP = 0x00,
  HEAD_DOWN,
  HEAD_LEFT,
  HEAD_RIGHT,
  TAIL_UP,
  TAIL_DOWN,
  TAIL_LEFT,
  TAIL_RIGHT,
  BODY_UPDOWN,
  BODY_LEFTRIGHT,
  BODY_UPLEFT,
  BODY_UPRIGHT,
  BODY_DOWNLEFT,
  BODY_DOWNRIGHT,
  end_item
};

inline constexpr std::array<screen::Tile, 14> SnakeTiles{
    /* Head */
    screen::Tile{.side_length = SnakeTile_SideLength,
                 .format = screen::Format::RGB565,
                 .data = std::data(Snake_HEAD_UP_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_HEAD_DOWN_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_HEAD_LEFT_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_HEAD_RIGHT_Data)},

    /* Tail */
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_TAIL_UP_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_TAIL_DOWN_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_TAIL_LEFT_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_TAIL_RIGHT_Data)},

    /* Body */
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_BODY_UPDOWN_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_BODY_LEFTRIGHT_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_CURVE_UPLEFT_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_CURVE_UPRIGHT_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_CURVE_DOWNLEFT_Data)},
    {.side_length = SnakeTile_SideLength,
     .format = screen::Format::RGB565,
     .data = std::data(Snake_CURVE_DOWNRIGHT_Data)},
};

static_assert(static_cast<uint8_t>(SnakeBodyPart::end_item) ==
              std::size(SnakeTiles));

[[nodiscard]] constexpr const screen::Tile &
to_snake_tile(SnakeBodyPart part) noexcept {
  const auto idx{static_cast<uint32_t>(part)};
  return snake::SnakeTiles[idx];
}

inline constexpr size_t AppleTile_SideLength{GRID_SPACE_PIX};
inline constexpr auto Apple_Tile_Data{
    constexpr_screen::fill_with_rgb565<AppleTile_SideLength *
                                       AppleTile_SideLength * 2>(
        constexpr_screen::Color::RED)};

inline constexpr screen::Tile AppleTile{.side_length = AppleTile_SideLength,
                                        .format = screen::Format::RGB565,
                                        .data = std::data(Apple_Tile_Data)};

inline constexpr size_t BackgroundTile_SideLength{GRID_SPACE_PIX};
inline constexpr auto Background_Tile_Data{
    constexpr_screen::fill_with_rgb565<BackgroundTile_SideLength *
                                       BackgroundTile_SideLength * 2>(
        constexpr_screen::Color::BLACK)};

inline constexpr screen::Tile BackgroundTile{
    .side_length = BackgroundTile_SideLength,
    .format = screen::Format::RGB565,
    .data = std::data(Background_Tile_Data)};
} // namespace snake

#endif