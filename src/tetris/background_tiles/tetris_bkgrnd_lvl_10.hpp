#ifndef TETRIS_BKGRND_LVL_10_HPP
#define TETRIS_BKGRND_LVL_10_HPP

#include <array>
#include "common/utilities.hpp"
#include "../tetris_defs.hpp"

namespace tetris {

inline constexpr std::array TETRIS_BKGRND_LVL_10 { embp::pfold(
DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,
DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,WHITE,
DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,DRKGRY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,BLACK,RED,RED,RED,BLACK,CYAN,CYAN,CYAN,BLACK,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,BLACK,RED,RED,RED,BLACK,CYAN,CYAN,CYAN,BLACK,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,BLACK,RED,RED,RED,BLACK,CYAN,CYAN,CYAN,BLACK,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,BLACK,MAGENTA,MAGENTA,MAGENTA,BLACK,GREEN,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,BLACK,MAGENTA,MAGENTA,MAGENTA,BLACK,GREEN,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,BLACK,MAGENTA,MAGENTA,MAGENTA,BLACK,GREEN,GREEN,GREEN,GREEN,BLACK,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,DRKGRY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,LGREY,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,
DRKGRY,DRKGRY,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,
DRKGRY,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE
)};

inline constexpr screen::Tile TETRIS_BKGRND_LVL_10_TILE {
    .side_length = 20,
    .format = VIDEO_FORMAT,
    .data = std::data(TETRIS_BKGRND_LVL_10)
};

} // namespace tetris
#endif
